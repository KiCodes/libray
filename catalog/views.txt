from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework import status
from django.shortcuts import get_object_or_404
from .models import Author, Book, Publisher, Borrower, Loan
from .serializers import AuthorSerializer, BookSerializer, PublisherSerializer, BorrowerSerializer, LoanSerializer


# author views
@api_view(['GET', 'POST'])
def author_list(request):
    if request.method == 'GET':
        authors = Author.objects.all()
        serializer = AuthorSerializer(authors, many=True)
        return Response(serializer.data)
    
    elif request.method == 'POST':
        serializer = AuthorSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

@api_view(['GET', 'PUT', 'DELETE'])
def author_detail(request, pk):
    author = get_object_or_404(Author, pk=pk)
    
    if request.method == 'GET':
        serializer = AuthorSerializer(author)
        return Response(serializer.data)
    
    elif request.method == 'PUT':
        serializer = AuthorSerializer(author, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
    elif request.method == 'DELETE':
        author.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)

# book view
@api_view(['GET', 'POST'])
def book_list(request):
    if request.method == 'GET':
        books = Book.objects.all()
        serializer = BookSerializer(books, many=True)
        return Response(serializer.data)
    
    elif request.method == 'POST':
        serializer = BookSerializer(data=request.data)
        if serializer.is_valid():
            author_data = request.data.pop('author')
            publisher_data = request.data.pop('publisher')
            
            author, created = Author.objects.get_or_create(**author_data)
            publisher, created = Publisher.objects.get_or_create(**publisher_data)
            
            book = Book.objects.create(author=author, publisher=publisher, **serializer.validated_data)
            book_serializer = BookSerializer(book)
            return Response(book_serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

@api_view(['GET', 'PUT', 'DELETE'])
def book_detail(request, pk):
    book = get_object_or_404(Book, pk=pk)
    
    if request.method == 'GET':
        serializer = BookSerializer(book)
        return Response(serializer.data)
    
    elif request.method == 'PUT':
        serializer = BookSerializer(book, data=request.data)
        if serializer.is_valid():
            author_data = request.data.pop('author')
            publisher_data = request.data.pop('publisher')
            
            author, created = Author.objects.get_or_create(**author_data)
            publisher, created = Publisher.objects.get_or_create(**publisher_data)
            
            book.author = author
            book.publisher = publisher
            book.title = serializer.validated_data.get('title', book.title)
            book.publication_date = serializer.validated_data.get('publication_date', book.publication_date)
            book.save()
            
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
    elif request.method == 'DELETE':
        book.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)

# publisher view
@api_view(['GET', 'POST'])
def publisher_list(request):
    if request.method == 'GET':
        publishers = Publisher.objects.all()
        serializer = PublisherSerializer(publishers, many=True)
        return Response(serializer.data)
    
    elif request.method == 'POST':
        serializer = PublisherSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

@api_view(['GET', 'PUT', 'DELETE'])
def publisher_detail(request, pk):
    publisher = get_object_or_404(Publisher, pk=pk)
    
    if request.method == 'GET':
        serializer = PublisherSerializer(publisher)
        return Response(serializer.data)
    
    elif request.method == 'PUT':
        serializer = PublisherSerializer(publisher, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
    elif request.method == 'DELETE':
        publisher.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)

# borrower
@api_view(['GET', 'POST'])
def borrower_list(request):
    if request.method == 'GET':
        borrowers = Borrower.objects.all()
        serializer = BorrowerSerializer(borrowers, many=True)
        return Response(serializer.data)
    
    elif request.method == 'POST':
        serializer = BorrowerSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

@api_view(['GET', 'PUT', 'DELETE'])
def borrower_detail(request, pk):
    borrower = get_object_or_404(Borrower, pk=pk)
    
    if request.method == 'GET':
        serializer = BorrowerSerializer(borrower)
        return Response(serializer.data)
    
    elif request.method == 'PUT':
        serializer = BorrowerSerializer(borrower, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
    elif request.method == 'DELETE':
        borrower.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)

# loan views
@api_view(['GET', 'POST'])
def loan_list(request):
    if request.method == 'GET':
        loans = Loan.objects.all()
        serializer = LoanSerializer(loans, many=True)
        return Response(serializer.data)
    
    elif request.method == 'POST':
        serializer = LoanSerializer(data=request.data)
        if serializer.is_valid():
            book_data = request.data.pop('book')
            borrower_data = request.data.pop('borrower')

            author_data = book_data.pop('author')
            publisher_data = book_data.pop('publisher')
            
            author, created = Author.objects.get_or_create(**author_data)
            publisher, created = Publisher.objects.get_or_create(**publisher_data)
            
            book, created = Book.objects.get_or_create(author=author, publisher=publisher, **book_data)
            borrower, created = Borrower.objects.get_or_create(**borrower_data)
            
            loan = Loan.objects.create(book=book, borrower=borrower, **serializer.validated_data)
            loan_serializer = LoanSerializer(loan)
            return Response(loan_serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

@api_view(['GET', 'PUT', 'DELETE'])
def loan_detail(request, pk):
    loan = get_object_or_404(Loan, pk=pk)
    
    if request.method == 'GET':
        serializer = LoanSerializer(loan)
        return Response(serializer.data)
    
    elif request.method == 'PUT':
        serializer = LoanSerializer(loan, data=request.data)
        if serializer.is_valid():
            book_data = request.data.pop('book')
            borrower_data = request.data.pop('borrower')

            author_data = book_data.pop('author')
            publisher_data = book_data.pop('publisher')
            
            author, created = Author.objects.get_or_create(**author_data)
            publisher, created = Publisher.objects.get_or_create(**publisher_data)
            
            book, created = Book.objects.get_or_create(author=author, publisher=publisher, **book_data)
            borrower, created = Borrower.objects.get_or_create(**borrower_data)

            loan.book = book
            loan.borrower = borrower
            loan.loan_date = serializer.validated_data.get('loan_date', loan.loan_date)
            loan.return_date = serializer.validated_data.get('return_date', loan.return_date)
            loan.save()

            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
    elif request.method == 'DELETE':
        loan.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)
